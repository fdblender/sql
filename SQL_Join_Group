//The GROUP BY Statement
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name;

// need example of above

// INNER JOIN
// For each order, show the related Customer contact information
SELECT Orders.CustomerID, Customers.CustomerID, Customers.CustomerName, Customers.ContactName, Orders.OrderDate
FROM Orders
INNER JOIN Customers
ON Orders.CustomerID=Customers.CustomerID;

// For each order, show the related shipping information
SELECT Orders.OrderID, Orders.OrderDate, Orders.ShipperID, Shippers.ShipperName, Shippers.Phone
FROM Orders
INNER JOIN Shippers
ON Orders.ShipperID=Shippers.ShipperID;

// For each customer, show the related orders
SELECT Customers.CustomerID, Customers.CustomerName, Orders.OrderID, Orders.OrderDate
FROM Customers
LEFT JOIN Orders
ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

// Select ALL the DIFFERENT (UNIQUE) cities from Customers and Suppliers tables:
SELECT City from Customers
UNION
SELECT City from Suppliers
ORDER BY City;

//SELECT Country from Customers
UNION
SELECT Country from Suppliers
ORDER BY Country;

// Copy all columns into a NEW TABLE or BACKUP TABLE
SELECT *
INTO CustomersBackup2013
FROM Customers;

// Copy a few columns from Suppliers into Customers
INSERT INTO Customers
(CustomerName, Country)
SELECT SupplierName, Country
FROM Suppliers;

// Create a database
CREATE DATABASE new_db;

// Create a new table
CREATE TABLE Managers
(ManagerID int,
ManagerFirstName varchar(255),
ManagerLastName varchar(255)
);

// Add, delete, or modify columns in an existing table
ALTER TABLE Managers
ADD Dept varchar(255);

ALTER TABLE Managers
DROP COLUMN Dept;

ALTER TABLE Managers
MODIFY COLUMN Dept int;
or
ALTER TABLE Managers
MODIFY Dept int;

// AD a Unique ID field that is auto-incremented for each new record
// SYNTAX FOR SQL SERVER - CONSULT DOCUMENTATION FOR OTHER SQL
CREATE TABLE Manager
(
ID int IDENTITY(1,1) PRIMARY KEY,
LastName varchar(255) NOT NULL,
FirstName varchar(255),
Department varchar(255)
)





// RIGHT JOIN: Return all employees and their orders they placed
SELECT Orders.OrderID, Orders.EmployeeID, Orders.OrderDate, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees
ON Orders.EmployeeID=Employees.EmployeeID
ORDER BY Orders.EmployeeID, Orders.OrderDate;

// Select ALL Customers and ALL Orders, matching on CustomerID
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders
ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;








